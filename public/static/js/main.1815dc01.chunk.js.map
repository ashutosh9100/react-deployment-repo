{"version":3,"sources":["Components/TemplateForm.js","Components/TemplateList.js","App.js","serviceWorker.js","index.js"],"names":["Option","props","key","val","value","DropDown","undefined","items","onChange","required","Math","random","map","item","TeplateForm","versions","Sporty","useState","temlateValue","SettemlateValue","versionValue","SetversionValue","toString","versionItemValue","SetversionItemValue","url","setUrl","className","onSubmit","event","axios","post","templateName","versionNo","then","res","status","preventDefault","update","htmlFor","e","console","log","target","type","name","placeholder","onClick","TemplateList","data","setData","ListItem","delete","_id","deleted","useEffect","get","pro","App","setPro","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1815dc01.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from 'axios'\r\nfunction Option(props) {\r\n    return (\r\n        <option key={props.val} value={props.val}>\r\n            {\" \"}\r\n            {props.val}{\" \"}\r\n        </option>\r\n    );\r\n}\r\nfunction DropDown(props) {\r\n    if (props.items !== undefined) {\r\n        return (\r\n            <select onChange={props.onChange} required={props.required}>\r\n                <option key={Math.random()} value=\"\">\r\n                    {props.value}\r\n                </option>\r\n                {props.items.map(item => {\r\n                    return <Option key={item} val={item} />;\r\n                })}\r\n            </select>\r\n        );\r\n    } else {\r\n        return (\r\n            <select onChange={props.onChange}>\r\n                <option value=\"\">select</option>\r\n            </select>\r\n        );\r\n    }\r\n}\r\nexport default function TeplateForm(props) {\r\n    const tempitems = [\"Natural One\", \"Techno 01\", \"Sporty\"];\r\n    const versions = {\r\n        \"Natural One\": [\"1.1.0\", \"4.1.0\", \"1.9.0\"],\r\n        Sporty: [\"2.0.0\", \"3.0.4\",\"2.3.1\"],\r\n        \"Techno 01\": [\"3.0.5\", \"3.0.6\", \"3.2.1\", \"3.8.6\"]\r\n    };\r\n    const [temlateValue, SettemlateValue] = useState(\"select\");\r\n    const [versionValue, SetversionValue] = useState(\"\");\r\n    const [versionItemValue, SetversionItemValue] = useState(\r\n        versions[\"\" + temlateValue.toString()]\r\n    );\r\n    const [url, setUrl] = useState(\"\");\r\n\r\n    const tempchangeHandler = e => {\r\n        console.log(\"inside tempchangeHandler = \" + e.target.value);\r\n        if (e.target.value) SettemlateValue(e.target.value);\r\n        if (e.target.value) SetversionItemValue(versions[\"\" + e.target.value]);\r\n        if (e.target.value) SetversionValue(versions[\"\" + e.target.value][0]); //versions[\"\" + e.target.value][0]);\r\n    };\r\n    const varsonChangeHandler = e => {\r\n        console.log(\"inside varsonChangeHandler = \" + e.target.value);\r\n        if (e.target.value !== \"\") SetversionValue(e.target.value);\r\n        else SetversionValue(\"\");\r\n    };\r\n    const urlHandler = e => {\r\n        setUrl(e.target.value);\r\n    };\r\n    const handleSubmit = event => {\r\n        \r\n        axios.post('http://localhost:5000/', {\r\n            url: url,\r\n            templateName: temlateValue,\r\n            versionNo:versionValue\r\n          }).then(res=>{\r\n              if(res.status===200);\r\n          })\r\n        event.preventDefault();\r\n        props.update()\r\n    };\r\n\r\n    const handlReset = e => {\r\n        console.log(\"handlReset\");\r\n        SettemlateValue(\"select\");\r\n        SetversionValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h2>DeployMent Form</h2>\r\n            <form onSubmit={handleSubmit} className=\"border border-primary App\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"template\">\r\n                        <strong >Select Template : </strong>\r\n                        <DropDown\r\n                            items={tempitems}\r\n                            value={temlateValue}\r\n                            onChange={tempchangeHandler}\r\n                            required={true}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"version\">\r\n                        <strong>Select version : </strong>\r\n                        <DropDown\r\n                            className=\"form-control\"\r\n                            items={versionItemValue}\r\n                            value={versionValue}\r\n                            onChange={varsonChangeHandler}\r\n                            required={false}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"url\">\r\n                        <strong>URl </strong>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"url\"\r\n                            value={url}\r\n                            onChange={urlHandler}\r\n                            placeholder=\"url\"\r\n                        />\r\n                    </label>\r\n                \r\n              \r\n                \r\n                    <div className=\" form-group App\">\r\n                        <button type=\"submit\" className=\"btn btn-primary App\">\r\n                            Add Deploy\r\n                        </button>\r\n                        <div className=\"form-group App\" />\r\n                        <button\r\n                            type=\"reset\"\r\n                            className=\"btn btn-primary form-group App\"\r\n                            onClick={handlReset}\r\n                        >\r\n                            Reset\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState,useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport default function TemplateList(props) {\r\n    const [data, setData] = useState([]);\r\n    \r\n  \r\n  // for first time render\r\n    useEffect(() => {\r\n      axios.get(\r\n        'http://localhost:5000/'\r\n      ).then(res=>setData(res.data))\r\n    },props.pro);\r\n    \r\n    //for auto reload \r\n    if(props.pro){\r\n      axios.get(\r\n        'http://localhost:5000/'\r\n      ).then(res=>setData(res.data))\r\n    }\r\n   \r\n    \r\n   \r\n    function ListItem(props){\r\n      const item=props.item;\r\n      \r\n      \r\n   \r\n      return(\r\n      <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n      <span className=\"col-3\">{item.url}</span>\r\n      <span className=\"col-3\">{item.templateName}</span>\r\n      <span className=\"col-3\">{item.versionNo}</span>\r\n      <span className=\"badge badge-primary badge-pill\"><button  onClick={(e)=>\r\n      {\r\n        console.log(e)\r\n        axios.delete(\r\n            `http://localhost:5000/${item._id}`\r\n          ).then(props.deleted);\r\n        }\r\n        }  className=\"btn\" \r\n      >Delete</button></span>\r\n    </li>)\r\n    \r\n    }\r\n    const deleted=()=>{\r\n      const newData=axios.get(\r\n        'http://localhost:5000/'\r\n      ).then(res=>setData(res.data))\r\n\r\n    }\r\n    return (\r\n        <div> <h2>TemplateList</h2>\r\n        <ul className=\"list-group\">\r\n            {\r\n                data.map(item => (\r\n                  <ListItem key={item._id} item={item} deleted={deleted}>\r\n                  </ListItem>\r\n                ))\r\n            }\r\n        </ul>\r\n        </div>);\r\n}\r\n","import React, { useState ,useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport TeplateForm from \"./Components/TemplateForm\";\r\nimport TemplateList from \"./Components/TemplateList\";\r\n\r\nexport default function App(props) {\r\n\r\n    const [data, setData] = useState(props.data);\r\n    const [pro, setPro] = useState(false);\r\n  \r\n      const update=()=>{\r\n          console.log('isup')\r\n        setPro(true);\r\n      }\r\n\r\n    \r\n    return (\r\n        \r\n        <div className=\"App\" >\r\n            <TeplateForm update={update}/>\r\n            <TemplateList data={data} pro={pro}/>\r\n        </div>\r\n       \r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}